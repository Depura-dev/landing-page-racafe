@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: linear-gradient(to right, $start-color, $end-color);
  } @else if $orientation == 'half' {
    background: linear-gradient(to left, $start-color 50%, $end-color 50%);
  } @else {
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin sequence($selector, $values, $properties:null, $move: 0) {
  $values-size: length($values);
  $selector-split: str-split($selector, " ");
  $child: if(length($selector-split) > 1, slice($selector-split, 2),'');

  @for $i from 1 + $move through $values-size + $move {
    #{nth($selector-split, 1)}:nth-child(#{$i}) #{$child} {
      @if $properties == null {
        background-color: nth($values, $i - $move);
      } @else {
        @for $x from 1 through length($properties) {
          #{nth($properties, $x)}: nth($values, $i - $move);
        }
      }
    }
  }
}

@mixin sequence-n($selector, $values, $properties:null, $move: 0, $reset:initial) {
  $values-size: length($values);
  $selector-split: str-split($selector, " ");
  $child: if(length($selector-split) > 1, slice($selector-split, 2),'');

  @for $i from 1 + $move through $values-size + $move {
    #{nth($selector-split, 1)}:nth-child(#{$values-size}n - #{$values-size - $i + $move * 2}) #{$child} {
      @if $properties == null {
        background-color: nth($values, $i - $move);
      } @else {
        @for $x from 1 through length($properties) {
          #{nth($properties, $x)}: nth($values, $i - $move);
        }
      }
    }
  }

  @if $move > 0 {
    @for $i from 1 through $move {
      #{nth($selector-split, 1)}:nth-child(#{$i}) #{$child} {
        @if $properties == null {
          background-color: #{$reset};
        } @else {
          @for $x from 1 through length($properties) {
            #{nth($properties, $x)}: #{$reset};
          }
        }
      }
    }
  }
}

@mixin circle($size){
  height: $size;
  min-height: $size;
  min-width: $size;
  width: $size;
  border-radius: 50%;
}

@mixin square($size){
  height: $size;
  min-height: $size;
  min-width: $size;
  width: $size;
}
